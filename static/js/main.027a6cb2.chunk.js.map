{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","searchField","setSearchFeild","setMonsters","filteredMonsters","filter","toLowerCase","includes","useEffect","fetch","then","response","json","users","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEaA,G,kBAAO,SAACC,GACjB,OACJ,sBAAKC,UAAU,OAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,oBAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCLLC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,sBAAKC,UAAU,YAAf,cAA6BD,EAAMW,SAASC,KAAI,SAAAT,GAAO,OAAE,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,WCHxES,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAEI,uBACAd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0BHG,MA7Bf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACRC,EADQ,KACKC,EADL,OAEiBF,mBAAS,IAF1B,mBAERR,EAFQ,KAEEW,EAFF,KAGTC,EAAmBZ,EAASa,QAAO,SAAArB,GAAO,OAC9CA,EAAQG,KAAKmB,cAAcC,SAASN,EAAYK,kBAchD,OAXFE,qBAAU,WAIRC,MAAM,+CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIV,EAAYU,QAC3B,IAKE,sBAAK/B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWa,YAAY,mBAAmBC,aAAc,SAACkB,GAAD,OAAKZ,EAAeY,EAAEC,OAAOC,UACrF,cAAC,EAAD,CAAUxB,SAAUY,QChBTa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.027a6cb2.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = (props) =>{\r\n    return(\r\n<div className=\"card\">\r\n<img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"meaningful text\" />\r\n<h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>\r\n\r\n    );\r\n\r\n}","import \"./card-list.styles.css\";\r\nimport {Card} from \"../card/card.component\"\r\nexport const CardList = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"card-list\"> {props.monsters.map(monster=><Card  key={monster.id} monster={monster}></Card>)}\r\n    </div>\r\n    );\r\n}","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return(\r\n\r\n        <input \r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n     \r\n\r\n    );\r\n\r\n}","import './App.css';\nimport { useState, useEffect } from 'react';\nimport  {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\n\n \nfunction App() {\nconst [searchField, setSearchFeild] = useState(\"\");\nconst [monsters, setMonsters] = useState([]);\nconst filteredMonsters = monsters.filter(monster=>\n  monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n// Similar to componentDidMount and componentDidUpdate:\nuseEffect(() => {\n  // Update the document title using the browser API\n  \n// console.log(\"componentDidMount or componentDidUpdated \")\n  fetch('https://jsonplaceholder.typicode.com/users/')\n  .then(response => response.json())\n  .then(users => setMonsters(users))\n},[]);\n\n\n\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox placeholder=\"search for stuff\" handleChange={(e)=>setSearchFeild(e.target.value)}/>\n    <CardList monsters={filteredMonsters}>   \n    </CardList>\n     </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}